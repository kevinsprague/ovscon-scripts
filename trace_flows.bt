#define OVS_PKT_CMD_UNSPEC  0
#define OVS_PKT_MISS        1
#define OVS_PKT_ACTION      2
#define OVS_PKT_EXECUTE     3
#define MAX_ATTRS  32
struct ufid {
    u32 ufid32[4];
}

struct flow_put {
    u32 flags;
    u64 key_ptr;
    u64 key_len;
    void *mask_ptr;
    u64 mask_len;
    void *action_ptr;
    u64 action_len;    
    void *ufid_ptr;
}
struct ukey {
    u64 cmap_node;
    u64 key_ptr;
    u64 key_len;
    u64 mask_ptr;
    u64 mask_len;
    struct ufid ufid;
}
struct nlattr {
    u16 len;
    u16 type;
}

struct ipv6 {
    u8 addr[16];
};

BEGIN
{
    printf("--------------------------------------------------------------\n");
    printf("|                   Tracking flow lifecycles                 |\n");
    printf("--------------------------------------------------------------\n");
}



tracepoint:openvswitch:ovs_dp_upcall
{
    if (args->upcall_cmd != OVS_PKT_MISS) {
        return;
    }
    $dpif_name = str(args->dp_name);
    $dev_name = str(args->dev_name);
    $pkt = buf(args->skbaddr, args->len);
    printf("ovs_dp_upcall on interface: %s\n", $dev_name);
    $recirc = args->recirc_id;
    $eth_type = args->key_eth_type;
    $ct_info = (args->key_ct_state, args->key_ct_orig_proto, args->key_ct_zone);
}


usdt::dpif_recv:recv_upcall
{
    if (arg1 != 0 ) { // is this right?
        return;
    }
    $dpif_name = uptr((arg0+7));
    printf("recv_upcall\n");
    $idx = (uint64) 0;
    $iters = 0;
    while ($idx < arg5 && $iters < MAX_ATTRS) {
        $pAttr = (struct nlattr*) uptr(arg4 + $idx);
        /* in_port */
        if ($pAttr->type == 3) {
            $in_port = *(uint32*) uptr(arg4 + $idx + 4);
        }
        /*& eth_type */
        if ($pAttr->type == 6) {
            $eth_type = *(uint16 *) (arg4 + $idx + 4);
        }
        /* ipv? */
        if ($pAttr->type == 7) {
            $ip_len = (uint64) 4;
            $src4 = *(uint32 *) (arg4 + $idx + 4);
            $dst4 = *(uint32 *) (arg4 + $idx + 4 + $ip_len);
            printf("\tThis flow goes from %s to %s\n",
                                        ntop($src4), ntop($dst4));
        }
        else if ($pAttr->type == 8) {
            $ip_len = (uint64) 16;
            $src6 = *(struct ipv6 *) (arg4 + $idx + 4);
            $dst6 = *(struct ipv6 *) (arg4 + $idx + 4 + $ip_len);
            printf("\tThis flow goes from %s to %s\n",
                                        ntop($src6.addr), ntop($dst6.addr));
        }
        $idx = (($idx + $pAttr->len + 3) & (0xffffff ^ 3));
        $iters++;
    }

}

usdt::dpif_netlink_operate__:op_flow_put
{
    printf("Flow put\n");
    $flow_put = (struct flow_put *) arg1;
    $pUfid = (struct ufid *) $flow_put->ufid_ptr;
    printf("\tThis flow received ufid:%08x-%04x-%04x-%04x-%04x%08x\n", 
           $pUfid->ufid32[0], $pUfid->ufid32[1] >> 16, 
           $pUfid->ufid32[1] & 0xffff, $pUfid->ufid32[2] >> 16, 
           $pUfid->ufid32[2] & 0xffff, $pUfid->ufid32[3]);
    $idx = (uint64) 0;
    $iters = 0;
    $key = uptr($flow_put->key_ptr);
    while ($idx < $flow_put->key_len && $iters < MAX_ATTRS) {
        $pAttr = (struct nlattr *) ((uint8*) ($key + $idx));
        /* in_port */
        if ($pAttr->type == 3) {
            $in_port = *(uint32*) uptr($key + $idx + 4);
        }
        /*& eth_type */
        if ($pAttr->type == 6) {
            $eth_type = *(uint16 *) ($key + $idx + 4);
        }
        /* ipv? */
        if ($pAttr->type == 7) {
            $ip_len = (uint64) 4;
            $src4 = *(uint32 *) ($key + $idx + 4);
            $dst4 = *(uint32 *) ($key + $idx + 4 + $ip_len);
            printf("\t\tand goes from %s to %s\n",
                                        ntop($src4), ntop($dst4));
        }
        else if ($pAttr->type == 8) {
            $ip_len = (uint64) 16;
            $src6 = *(struct ipv6 *) ($key + $idx + 4);
            $dst6 = *(struct ipv6 *) ($key + $idx + 4 + $ip_len);
            printf("\t\tand goes from %s to %s\n",
                                        ntop($src6.addr), ntop($dst6.addr));
        }
        $idx = (($idx + $pAttr->len + 3) & (0xffffff ^ 3));
        $iters++;
    }
}


usdt::revalidate:flow_result / arg0 /
{
    printf("flow revalidator event\n");
    printf("\tThe flow with ufid:");
    $ukey = (struct ukey*) arg2;
    printf("%08x-%04x-%04x-%04x-%04x%08x was invalidated because ",
           $ukey->ufid.ufid32[0], 
           $ukey->ufid.ufid32[1] >> 16, $ukey->ufid.ufid32[1] & 0xffff,
           $ukey->ufid.ufid32[2] >> 16, $ukey->ufid.ufid32[2] & 0xffff,
           $ukey->ufid.ufid32[3]);
    if (arg0 == 1) {
         printf("it timed out.\n");
    }
    else if (arg0 == 2) {
        printf("it was too expensive to revalidate.\n")
    }
    else if (arg0 == 3) {
        printf("it needed a narrower wildcard mask.\n");
    }
    else if (arg0 == 4) {
        printf("it had a bad ODP flow fit.\n");
    }
    else if (arg0 == 5) {
        printf("there was no associated ofproto.\n");
    }
    else if (arg0 == 6) {
        printf("there was a translation error.\n");
    }
    else if (arg0 == 7) {
        printf("cache avoidance.\n");
    }
    else if (arg0 == 8) {
        printf("a kill them all signal was given.\n");
    }
}
/*       nlattr:
 * +-----+------+---------+
 * | len | type | payload |
 * +-----+------+---------+
 * len and type are u16s
 * len is the length including the len and the type (so 4 + len(payload))
 */
  
END
{
    printf("bye\n");
}
